// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id
  name          String     @db.VarChar(50)
  username      String     @unique @db.VarChar(20)
  usernameSet   Boolean    @default(false)
  image         String?
  banner        String?
  bio           String?    @db.VarChar(160)
  location      String?    @db.VarChar(30)
  website       String?    @db.VarChar(100)
  birthDate     DateTime?
  email         String
  emailVerified Boolean
  createdAt     DateTime
  updatedAt     DateTime
  followers     Follow[]   @relation("Follower")
  following     Follow[]   @relation("Following")
  type          UserType   @default(user)
  sessions      Session[]
  accounts      Account[]
  posts         Post[]
  likes         Like[]
  repost        Repost[]
  bookmarks     Bookmark[]
  replies       Reply[]

  @@unique([email])
  @@map("burbir_user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("burbir_session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("burbir_account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("burbir_verification")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("burbir_follow")
}

model Post {
  id        String   @id
  createdAt DateTime @default(now())
  content   String?  @db.VarChar(255)
  image     String?
  imageId   String?
  authorId  String
  parentId  String?
  type      PostType @default(POST)

  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Post?      @relation("postToParent", fields: [parentId], references: [id], onDelete: Cascade)
  children  Post[]     @relation("postToParent")
  replies   Reply[]
  likes     Like[]
  bookmarks Bookmark[]
  reposts   Repost[]

  @@unique([createdAt, id])
  @@index([authorId])
  @@index([type])
  @@map("burbir_post")
}

model Repost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("burbir_repost")
}

model Reply {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  parentId  String
  postId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([parentId])
  @@map("burbir_reply")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@map("burbir_like")
}

model Bookmark {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@map("burbir_bookmark")
}

enum PostType {
  POST
  REPOST
  COMMENT
}

enum UserType {
  user
  developer
  verified
}
